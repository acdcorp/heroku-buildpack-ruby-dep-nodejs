#!/usr/bin/env bash
# usage: bin/compile <build-dir> <cache-dir>

set -e

BUILD_DIR=$1
CACHE_DIR=$2
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`
WGET_BUILD="$(mktmpdir wget)"
BASE_URL="https://s3-external-1.amazonaws.com/heroku-buildpack-ruby"
DEFAULT_RUBY_VERSION="2.1.2-p95"
build_dir=$1
cache_dir=$2
env_dir=$3


function install_node {
  set -o pipefail   # dont ignore exit codes when piping output

  bp_dir=$(cd $(dirname $0); cd ..; pwd)

  # Load some convenience functions like status(), echo(), and indent()
  source $bp_dir/bin/common.sh

  # Output npm debug info on error
  trap cat_npm_debug_log ERR

  # Look in package.json's engines.node field for a semver range
  semver_range=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .engines.node)

  # Resolve node version using semver.io
  node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

  # Recommend using semver ranges in a safe manner
  if [ "$semver_range" == "null" ]; then
    protip "Specify a node version in package.json"
    semver_range=""
  elif [ "$semver_range" == "*" ]; then
    protip "Avoid using semver ranges like '*' in engines.node"
  elif [ ${semver_range:0:1} == ">" ]; then
    protip "Avoid using semver ranges starting with '>' in engines.node"
  fi

  # Output info about requested range and resolved node version
  if [ "$semver_range" == "" ]; then
    status "Defaulting to latest stable node: $node_version"
  else
    status "Requested node range:  $semver_range"
    status "Resolved node version: $node_version"
  fi

  # Download node from Heroku's S3 mirror of nodejs.org/dist
  status "Downloading and installing node"
  node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
  curl $node_url -s -o - | tar xzf - -C $build_dir

  # Move node (and npm) into ./vendor and make them executable
  mkdir -p $build_dir/vendor
  mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
  chmod +x $build_dir/vendor/node/bin/*
  PATH=$build_dir/vendor/node/bin:$PATH

  # Run subsequent node/npm commands from the build path
  cd $build_dir

  # If node_modules directory is checked into source control then
  # rebuild any native deps. Otherwise, restore from the build cache.
  if test -d $build_dir/node_modules; then
    status "Found existing node_modules directory; skipping cache"
    status "Rebuilding any native dependencies"
    npm rebuild 2>&1 | indent
  elif test -d $cache_dir/node/node_modules; then
    status "Restoring node_modules directory from cache"
    cp -r $cache_dir/node/node_modules $build_dir/

    status "Pruning cached dependencies not specified in package.json"
    npm prune 2>&1 | indent

    if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
      status "Node version changed since last build; rebuilding dependencies"
      npm rebuild 2>&1 | indent
    fi

  fi

  # Scope config var availability only to `npm install`
  (
    if [ -d "$env_dir" ]; then
      status "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    status "Installing dependencies"
    # Make npm output to STDOUT instead of its default STDERR
    npm install --userconfig $build_dir/.npmrc --production 2>&1 | indent
  )

  # Persist goodies like node-version in the slug
  mkdir -p $build_dir/.heroku

  # Save resolved node version in the slug for later reference
  echo $node_version > $build_dir/.heroku/node-version

  # Purge node-related cached content, being careful not to purge the top-level
  # cache, for the sake of heroku-buildpack-multi apps.
  rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
  rm -rf $cache_dir/node
  mkdir -p $cache_dir/node

  # If app has a node_modules directory, cache it.
  if test -d $build_dir/node_modules; then
    status "Caching node_modules directory for future builds"
    cp -r $build_dir/node_modules $cache_dir/node
  fi

  # Copy goodies to the cache
  cp -r $build_dir/.heroku $cache_dir/node

  status "Cleaning up node-gyp and npm artifacts"
  rm -rf "$build_dir/.node-gyp"
  rm -rf "$build_dir/.npm"

  # If Procfile is absent, try to create one using `npm start`
  if [ ! -e $build_dir/Procfile ]; then
    npm_start=$(cat $build_dir/package.json | $bp_dir/vendor/jq -r .scripts.start)

    # If `scripts.start` is set in package.json, or a server.js file
    # is present in the app root, then create a default Procfile
    if [ "$npm_start" != "null" ] || [ -f $build_dir/server.js ]; then
      status "No Procfile found; Adding npm start to new Procfile"
      echo "web: npm start" > $build_dir/Procfile
    else
      status "Procfile not found and npm start script is undefined"
      protip "Create a Procfile or specify a start script in package.json"
    fi
  fi

  # Update the PATH
  status "Building runtime environment"
  mkdir -p $build_dir/.profile.d
  echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $build_dir/.profile.d/nodejs.sh

  # Post package.json to nomnom service
  # Use a subshell so failures won't break the build.
  (
    curl \
      --data @$build_dir/package.json \
      --fail \
      --silent \
      --request POST \
      --header "content-type: application/json" \
      https://nomnom.heroku.com/?request_id=$REQUEST_ID \
      > /dev/null
  ) &
}

function indent {
  sed -u 's/^/       /'
}

function download_yaml {
  tmpdir=.libyaml
  mkdir -p $tmpdir
  yaml_tar="$BASE_URL/libyaml-0.1.4.tgz"
  curl $yaml_tar -s -o - | tar xzf - -C $tmpdir/

  yaml_include_path="$tmpdir/include"
  yaml_lib_path="$tmpdir/lib"

  CPATH=$yaml_include_path:$CPATH
  CPPATH=$yaml_include_path:$CPPATH
  LIBRARY_PATH=$yaml_lib_path:$LIBRARY_PATH
}

function set_ruby_version {
  if [ -f ${BUILD_DIR}/.ruby-version ]; then
    RUBY_VERSION=$(cat ${BUILD_DIR}/.ruby-version)
  fi
}

function download_ruby {
  VERSION=${RUBY_VERSION:-$DEFAULT_RUBY_VERSION}

  if [ ! -d "$CACHE_DIR/ruby" ]; then
    echo "-----> Downloading Ruby $VERSION"
    mkdir -p $CACHE_DIR/ruby
    ruby_tar="$BASE_URL/ruby-$VERSION.tgz"
    curl $ruby_tar -s -o - | tar xzf - -C $CACHE_DIR/ruby
  fi
}

function copy_ruby_to_build_dir {
  echo "-----> Vendoring Ruby into slug"
  cp -ru $CACHE_DIR/ruby $BUILD_DIR/ruby
}

function install_ruby {
  download_yaml
  download_ruby
  copy_ruby_to_build_dir
}

function install_gems {
  PATH=$CACHE_DIR/ruby/bin:$PATH
  cd $BUILD_DIR
  echo "install: --no-ri --no-rdoc --env-shebang" > .gemrc
  cp .gemrc $HOME

  echo "-----> Install dep"
  gem install dep-cj | indent

  echo "-----> Creating gemset"
  if [ ! -d "$CACHE_DIR/.gs" ]; then
    mkdir -p $CACHE_DIR/.gs
  fi

  mkdir -p $BUILD_DIR/.profile.d  
  cat <<-EOF > $BUILD_DIR/.profile.d/gs.sh
    export GEM_HOME=\$HOME/.gs
    export GEM_PATH=\$HOME/.gs:$(gem env path | sed "s|$CACHE_DIR|\$HOME|")
    export PATH=\$HOME/.gs/bin:\$HOME/ruby/bin:bin:/usr/bin:/bin
EOF

  HOME=$CACHE_DIR source $BUILD_DIR/.profile.d/gs.sh

  cp $BUILD_DIR/.gems $CACHE_DIR

  echo "-----> Installing gems"
  cd $CACHE_DIR
  #TODO: use some kind of signal to clear the gem set on user demand by doing a rm -rf $CACHE_DIR/.gs
  dep install | indent
  cp -ru $CACHE_DIR/.gs $BUILD_DIR
}

function install_wget {
  mktmpdir() {
    dir=$(mktemp -t fakesu-$1-XXXX)
    rm -rf $dir
    mkdir -p $dir
    echo $dir
  }

  function indent() {
    c='s/^/       /'
    case $(uname) in
      Darwin) sed -l "$c";;
      *)      sed -u "$c";;
    esac
  }

  mkdir -p $CACHE_DIR/.tools/wget

  export PATH=/sbin:/usr/sbin:$PATH:$CACHE_DIR/.tools/wget/bin

  echo "-----> Fetching and installing wget"
  cd $WGET_BUILD
  curl -O http://ftp.gnu.org/gnu/wget/wget-1.13.4.tar.bz2
  tar jxvf wget-1.13.4.tar.bz2
  cd wget-1.13.4
  ./configure --prefix=$CACHE_DIR/.tools/wget --without-ssl
  make
  make install
  echo "wget installed" | indent

  cd $BUILD_DIR
  mkdir -p $BUILD_DIR/bin
  cp $CACHE_DIR/.tools/wget/bin/wget $BUILD_DIR/bin
}

function make_compile {
  PATH=$CACHE_DIR/ruby/bin:$PATH
  cd $BUILD_DIR
  echo "-----> Running make compile"
	wget https://raw.githubusercontent.com/educabilia/bs/master/bin/bs
  chmod +x bs
  mv bs $CACHE_DIR/ruby/bin
  make compile
}


set_ruby_version
install_wget
install_ruby
install_gems
install_node
make_compile
